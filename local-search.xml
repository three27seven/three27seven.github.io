<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stm32-base-01-基础</title>
    <link href="/2024/11/02/stm32-base01-%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/02/stm32-base01-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><blockquote><p>本系列须知：</p><ol><li>本博客中stm32入门系列是一些基础外设的使用，所用为正点原子stm32f103zet6精英版</li><li>使用的是hal库和cubemx</li></ol></blockquote><p>本实验内容如下</p><ul><li><p>led的点亮</p></li><li><p>独立按键检测（通过read_pin的方式），按key1，按一下灯的状态调转</p></li><li><p>独立按键检测（通过外部中断的方式），KEY0,长按LED0亮，短按LED1灭，松手都灭</p></li><li><p>定时器的使用，LED0亮一秒，熄一秒</p></li><li><p>定时器的使用，pwm灯。通过KEY1来增强led灯的亮度</p></li><li><p>定时器的使用，通过定时器来判断key1单击、双击、长按。单击亮LED0,双击亮LED1，长按所有灯关闭</p></li></ul><p><strong>ps.本系列不讲cubemx配置，但会放相关博客连接</strong></p><p><strong>pps.非完全原创，这其实也算我个人的学习笔记</strong></p><h1 id="LED的点亮"><a href="#LED的点亮" class="headerlink" title="LED的点亮"></a>LED的点亮</h1><p>这个无需多说</p><p><a href="https://blog.csdn.net/qq_27849725/article/details/121937526">一、【STM32 HAL库开发】点亮led灯_stm32cubeide的hal库编程呼吸灯编码-CSDN博客</a></p><p>总结一下</p><ol><li>通过cubemx配置gpio口(PE3定义为LED0)</li><li>通过HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_RESET);置gpio口低电平，从而点亮LED</li><li>HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_SET)置高电平，从而熄灭LED灯</li></ol><h2 id="led-c"><a href="#led-c" class="headerlink" title="led.c"></a>led.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LED.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED0_ON</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_RESET);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED0_OFF</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_SET);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED1_ON</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED1_OFF</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="led-h"><a href="#led-h" class="headerlink" title="led.h"></a>led.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __LED_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __LED_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f1xx_hal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED0_ON</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">LED0_OFF</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">LED1_ON</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">LED1_OFF</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br><span class="hljs-comment">//</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br><br>LED1_OFF();<br>LED0_ON();<br>HAL_Delay(<span class="hljs-number">1000</span>);<br>LED0_OFF();<br>LED1_ON();<br>HAL_Delay(<span class="hljs-number">1000</span>);<br><br><br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="独立按键检测read-pin"><a href="#独立按键检测read-pin" class="headerlink" title="独立按键检测read_pin"></a>独立按键检测read_pin</h1><p><a href="https://blog.csdn.net/weixin_43395116/article/details/118088792">STM32 HAL库实战基础篇（一）——跑马灯与按键输入_stm32按键输入低电平代码怎么写-CSDN博客</a></p><h2 id="key-c"><a href="#key-c" class="headerlink" title="key.c"></a>key.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;key.h&quot;</span></span><br><br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">key_scan</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint8_t</span> key_value = <span class="hljs-number">0</span>;<span class="hljs-comment">//未被按下</span><br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == GPIO_PIN_RESET)<br>&#123;<br><span class="hljs-keyword">while</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == GPIO_PIN_RESET)<br>&#123;<br>key_value = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> key_value;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="key-h"><a href="#key-h" class="headerlink" title="key.h"></a>key.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __KEY_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __KEY_</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f1xx_hal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">key_scan</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> </span><br><br></code></pre></td></tr></table></figure><h2 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br><span class="hljs-type">uint8_t</span> key;<br><span class="hljs-comment">//</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br><br>key = key_scan();<br><span class="hljs-keyword">if</span>(key == <span class="hljs-number">1</span>)  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);<br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<strong>该方式即时性极差</strong>，不建议实际工程中使用</p><h1 id="独立按键检测（中断方式）"><a href="#独立按键检测（中断方式）" class="headerlink" title="独立按键检测（中断方式）"></a>独立按键检测（中断方式）</h1><p><a href="https://blog.csdn.net/Qxiaofei_/article/details/116305936">【STM32】HAL库——按键外部中断_hal库按键中断-CSDN博客</a></p><p>中断的方式就非常丝滑了，即时性很强</p><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br>&#123;<br><span class="hljs-keyword">if</span>(GPIO_Pin == KEY0_Pin)<br>&#123;<br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == GPIO_PIN_RESET)<br>&#123;<br>HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* USER CODE END PM */</span><br><br><span class="hljs-comment">/* Private variables ---------------------------------------------------------*/</span><br><br><span class="hljs-comment">/* USER CODE BEGIN PV */</span><br><br><span class="hljs-comment">/* USER CODE END PV */</span><br><br><span class="hljs-comment">/* Private function prototypes -----------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SystemClock_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/* USER CODE BEGIN PFP */</span><br><br><br><span class="hljs-comment">/* USER CODE END PFP */</span><br><br><span class="hljs-comment">/* Private user code ---------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br><br><span class="hljs-comment">/* USER CODE END 0 */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  The application entry point.</span><br><span class="hljs-comment">  * @retval int</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br><br><span class="hljs-comment">//</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br><br><span class="hljs-comment">//key = key_scan();</span><br><span class="hljs-comment">//if(key == 1)  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);</span><br><br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时器（控制LED）"><a href="#定时器（控制LED）" class="headerlink" title="定时器（控制LED）"></a>定时器（控制LED）</h1><p>1s，led灯亮，1s，led灯灭</p><p><a href="https://blog.csdn.net/lcp0633/article/details/111145199">STM32CubeMX——定时器之定时功能_stm32cubemx 定时器-CSDN博客</a></p><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_TIM_PeriodElapsedCallback</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br>&#123;<br><span class="hljs-keyword">if</span>(htim-&gt;Instance==TIM2)<br>&#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br>  MX_USART1_UART_Init();<br>  MX_TIM2_Init();<br>HAL_TIM_Base_Start_IT(&amp;htim2);<br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br><span class="hljs-comment">//</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br><br><span class="hljs-keyword">if</span>(count != <span class="hljs-number">0</span> &amp;&amp; count %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br>HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);<br>&#125;<br><br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时器（pwm呼吸灯）"><a href="#定时器（pwm呼吸灯）" class="headerlink" title="定时器（pwm呼吸灯）"></a>定时器（pwm呼吸灯）</h1><p>看<a href="https://www.bilibili.com/video/BV1q4411d7RX?buvid=XY503A852059090940360EA7F6634B0B49636&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=/3C9NUm7S1zGdXedTAP/uQ==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b79c5a97-5df6-4d46-afdf-459747554315&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1721275416&unique_k=d4k1kZw&up_id=414065421&vd_source=b450c45c8a50d614ba59d61bc40cb584&spm_id_from=333.788.videopod.episodes&p=18">【定时器+HAL库】PWM的输出_哔哩哔哩_bilibili</a>学会如何调节pwm频率</p><p>然后配置LED灯的引脚，设置pwm输出</p><blockquote><p>pwm是个占空比的问题，其中占空比，也就是pulse越大，led灯越暗</p></blockquote><p>因为呼吸灯是由暗到亮，由亮到暗</p><p>由暗到亮时，pulse需要减</p><p>由亮到暗时，pulse需要加</p><p>为了区分这两种模式，我们设置标志位flag</p><p>flag &#x3D; 0 时，pulse 加</p><p>flag &#x3D; 1时，pulse 减</p><p>当pulse达到最大值时，需要减，则flag &#x3D; 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">HAL_TIM_PWM_Start(&amp;htim3,TIM_CHANNEL_2);<br><span class="hljs-type">void</span> <span class="hljs-title function_">pwm_led</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>HAL_Delay(<span class="hljs-number">5</span>);<br>pwm = (flag == <span class="hljs-number">0</span>) ? pwm + <span class="hljs-number">10</span> : pwm - <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(pwm == <span class="hljs-number">1000</span>) flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(pwm == <span class="hljs-number">0</span>) flag = <span class="hljs-number">0</span>;<br> __HAL_TIM_SET_COMPARE(&amp;htim3,TIM_CHANNEL_2,pwm);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定时器（控制独立按键）"><a href="#定时器（控制独立按键）" class="headerlink" title="定时器（控制独立按键）"></a>定时器（控制独立按键）</h1><p>按键的状态有多种：单击，双击，长按等</p><p>本实验将通过定时器来判断它的状态</p><p>如何判断短按：</p><p>key按下，定时器计时，key松开，定时器停止计时</p><p>如何判断长按：</p><p>key按下，定时器计时，时间超过2s，则停止计时，判断为短按</p><p>所以我们设置开启定时器中断的方式如下，即按键按下则开启定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">keys</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == <span class="hljs-number">0</span>)<br>&#123;<br>HAL_TIM_Base_Start_IT(&amp;htim2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中断内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_TIM_PeriodElapsedCallback</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br>&#123;<br><span class="hljs-keyword">if</span>(htim-&gt;Instance==TIM2)<br>&#123;<br>count++; <span class="hljs-comment">//count+就代表着计时</span><br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == <span class="hljs-number">1</span>)<span class="hljs-comment">//按键松开</span><br>&#123;<br>HAL_TIM_Base_Stop_IT(&amp;htim2);<span class="hljs-comment">//停止计时</span><br>save_count = count;<span class="hljs-comment">//保存按键时长</span><br>count = <span class="hljs-number">0</span>;<span class="hljs-comment">//准备记录下一次按键</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后再根据时长判断长按和短按</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">key_judge</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>keys();<br><span class="hljs-type">uint8_t</span> key_state = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">50</span>&lt;save_count &amp;&amp; save_count&lt;<span class="hljs-number">120</span>) key_state = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">150</span>&lt;save_count &amp;&amp; save_count&lt;<span class="hljs-number">220</span>) key_state = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> key_state;<br>&#125;<br></code></pre></td></tr></table></figure><p>在最后是变量的命名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> save_count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>总</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint8_t</span> save_count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_TIM_PeriodElapsedCallback</span><span class="hljs-params">(TIM_HandleTypeDef *htim)</span><br>&#123;<br><span class="hljs-keyword">if</span>(htim-&gt;Instance==TIM2)<br>&#123;<br>count++;<br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == <span class="hljs-number">1</span>)<br>&#123;<br>HAL_TIM_Base_Stop_IT(&amp;htim2);<br>save_count = count;<br>count = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* USER CODE END PM */</span><br><br><span class="hljs-comment">/* Private variables ---------------------------------------------------------*/</span><br><br><span class="hljs-comment">/* USER CODE BEGIN PV */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">keys</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">key_judge</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/* USER CODE END PV */</span><br><br><span class="hljs-comment">/* Private function prototypes -----------------------------------------------*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SystemClock_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-comment">/* USER CODE BEGIN PFP */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_dac</span><span class="hljs-params">(<span class="hljs-type">float</span> v)</span>;<br><br><span class="hljs-comment">/* USER CODE END PFP */</span><br><br><span class="hljs-comment">/* Private user code ---------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br><br><span class="hljs-comment">/* USER CODE END 0 */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  The application entry point.</span><br><span class="hljs-comment">  * @retval int</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br>  MX_USART1_UART_Init();<br>  MX_TIM2_Init();<br>  MX_RTC_Init();<br>  MX_SDIO_SD_Init();<br>  MX_FSMC_Init();<br>  MX_TIM3_Init();<br>  MX_DAC_Init();<br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><span class="hljs-type">uint8_t</span> key = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br><br>key = key_judge();<br><span class="hljs-comment">//printf(&quot;save_count = %d \r\n&quot;,save_count);</span><br><span class="hljs-comment">//printf(&quot;key_state = %d \r\n&quot;,key);</span><br><span class="hljs-comment">//HAL_Delay(500);</span><br><span class="hljs-keyword">switch</span>(key)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;short\r\n&quot;</span>);key = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long\r\n&quot;</span>);key = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">keys</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == <span class="hljs-number">0</span>)<br>&#123;<br>HAL_TIM_Base_Start_IT(&amp;htim2);<br>&#125;<br>&#125;<br><br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">key_judge</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>keys();<br><span class="hljs-type">uint8_t</span> key_state = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">50</span>&lt;save_count &amp;&amp; save_count&lt;<span class="hljs-number">120</span>) key_state = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">150</span>&lt;save_count &amp;&amp; save_count&lt;<span class="hljs-number">220</span>) key_state = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> key_state;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
      <category>base</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>stm32-base-02-DAC与ADC</title>
    <link href="/2024/10/31/stm32-base-02-DAC%E4%B8%8EADC/"/>
    <url>/2024/10/31/stm32-base-02-DAC%E4%B8%8EADC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列须知：</p><ol><li>本博客中stm32入门系列是一些基础外设的使用，所用为正点原子stm32f103zet6精英版</li><li>使用的是hal库和cubemx</li></ol></blockquote><p>本实验内容如下</p><ul><li><p>学会使用串口</p></li><li><p>通过ADC来读取电压，通过串口发送</p></li><li><p>通过DAC改变输出电压，用万用表测量</p></li></ul><h1 id="使用串口"><a href="#使用串口" class="headerlink" title="使用串口"></a>使用串口</h1><p><a href="https://www.bilibili.com/video/BV1q4411d7RX?buvid=XY503A852059090940360EA7F6634B0B49636&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=/3C9NUm7S1zGdXedTAP/uQ==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b79c5a97-5df6-4d46-afdf-459747554315&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1721275416&unique_k=d4k1kZw&up_id=414065421&vd_source=b450c45c8a50d614ba59d61bc40cb584&spm_id_from=333.788.videopod.episodes&p=9">【串口通信-HAL库】初学阻塞式收发_哔哩哔哩_bilibili</a></p><p>该视频中<strong>【串口通信—HAL库】初学阻塞式收发</strong>即使用串口教学，非常简单清晰</p><p>ps.一定要注意串口发送的为uint8类型的数据，如果要发uint32的，需要进行转换。</p><p>需要进阶的话，即用printf输出串口信息的话，则看它下面一则视频,记得<strong>打开魔术棒，选择Target，勾上Use MicroLIB</strong>，具体如下<a href="https://blog.csdn.net/qq_44941069/article/details/120463858">stm32中printf函数无法向串口输出问题解决_stm32 解决printf中%f不能输出的问题 分解-CSDN博客</a></p><h1 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h1><p><a href="https://www.bilibili.com/video/BV1q4411d7RX?buvid=XY503A852059090940360EA7F6634B0B49636&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=/3C9NUm7S1zGdXedTAP/uQ==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b79c5a97-5df6-4d46-afdf-459747554315&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1721275416&unique_k=d4k1kZw&up_id=414065421&vd_source=b450c45c8a50d614ba59d61bc40cb584&spm_id_from=333.788.videopod.episodes&p=20">【ADC-HAL库】轮询方式读取电压值_哔哩哔哩_bilibili</a></p><p><a href="https://www.cnblogs.com/zjx123/p/11990578.html">STM32对HAL库的ADC(单通道非DMA) - 无乐不作丶 - 博客园</a>该博客讲了一下小细节</p><p>ps.记得先配置引脚，adc是读取引脚的电压值！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br> &#123;<br>   <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>   <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>HAL_ADC_Start(&amp;hadc1);<br>HAL_ADC_PollForConversion(&amp;hadc1,<span class="hljs-number">50</span>);<br><span class="hljs-keyword">if</span>(HAL_IS_BIT_SET(HAL_ADC_GetState(&amp;hadc1),HAL_ADC_STATE_REG_EOC))<br>&#123;<br>value = HAL_ADC_GetValue(&amp;hadc1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;adc = %fV\r\n&quot;</span>,value*<span class="hljs-number">3.3</span>/<span class="hljs-number">4096</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DMA读取ADC"><a href="#DMA读取ADC" class="headerlink" title="DMA读取ADC"></a>DMA读取ADC</h1><p><a href="https://www.bilibili.com/video/BV1q4411d7RX?buvid=XY503A852059090940360EA7F6634B0B49636&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=/3C9NUm7S1zGdXedTAP/uQ==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b79c5a97-5df6-4d46-afdf-459747554315&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1721275416&unique_k=d4k1kZw&up_id=414065421&vd_source=b450c45c8a50d614ba59d61bc40cb584&spm_id_from=333.788.videopod.episodes&p=21">【ADC-HAL库】DMA方式多通道采集_哔哩哔哩_bilibili</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>  <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>HAL_Delay(<span class="hljs-number">500</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">uint8_t</span> i = <span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">100</span>;)<br>&#123;<br>adc4 = ADC1_value[i++];<br>adc5 = ADC1_value[i++];<br>&#125;<br>adc4 = adc4 / <span class="hljs-number">50</span>;<br>adc5 = adc5 / <span class="hljs-number">50</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;adc4 = %fV\r\n&quot;</span>,adc4*<span class="hljs-number">3.3</span>/<span class="hljs-number">4096</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;adc5 = %fV\r\n&quot;</span>,adc5*<span class="hljs-number">3.3</span>/<span class="hljs-number">4096</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h1><p><a href="https://www.bilibili.com/video/BV1q4411d7RX?buvid=XY503A852059090940360EA7F6634B0B49636&from_spmid=playlist.playlist-detail.0.0&is_story_h5=false&mid=/3C9NUm7S1zGdXedTAP/uQ==&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b79c5a97-5df6-4d46-afdf-459747554315&share_source=COPY&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1721275416&unique_k=d4k1kZw&up_id=414065421&vd_source=b450c45c8a50d614ba59d61bc40cb584&spm_id_from=333.788.videopod.episodes&p=22">【DAC-HAL库】数模转换_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/zy2232652/article/details/139469764">STM32单片机开发入门(三) 万用表的介绍及使用方法_stm32万用表-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br><br>  <span class="hljs-comment">/* MCU Configuration--------------------------------------------------------*/</span><br><br>  <span class="hljs-comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br>  HAL_Init();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* Configure the system clock */</span><br>  SystemClock_Config();<br><br>  <span class="hljs-comment">/* USER CODE BEGIN SysInit */</span><br><br>  <span class="hljs-comment">/* USER CODE END SysInit */</span><br><br>  <span class="hljs-comment">/* Initialize all configured peripherals */</span><br>  MX_GPIO_Init();<br>  MX_USART1_UART_Init();<br>  MX_DAC_Init();<br>  <span class="hljs-comment">/* USER CODE BEGIN 2 */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END 1 */</span><br>  <span class="hljs-comment">/* USER CODE END 2 */</span><br><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-comment">/* USER CODE BEGIN WHILE */</span><br>HAL_DAC_Start(&amp;hdac,DAC_CHANNEL_1);<br>set_dac(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-comment">/* USER CODE END WHILE */</span><br><br>    <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>&#125;<br>  <span class="hljs-comment">/* USER CODE END 3 */</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_dac</span><span class="hljs-params">(<span class="hljs-type">float</span> v)</span><br>&#123;<br>HAL_DAC_SetValue(&amp;hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,v/<span class="hljs-number">3.3</span>*<span class="hljs-number">4096</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
      <category>base</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文明6-科技胜利与统治胜利</title>
    <link href="/2024/05/30/%E6%96%87%E6%98%8E6-%E7%A7%91%E6%8A%80%E8%83%9C%E5%88%A9%E4%B8%8E%E7%BB%9F%E6%B2%BB%E8%83%9C%E5%88%A9/"/>
    <url>/2024/05/30/%E6%96%87%E6%98%8E6-%E7%A7%91%E6%8A%80%E8%83%9C%E5%88%A9%E4%B8%8E%E7%BB%9F%E6%B2%BB%E8%83%9C%E5%88%A9/</url>
    
    <content type="html"><![CDATA[<p>首先，免责声明，入门小白，玩一会写一会，肯定有狭隘的片面之词</p><p>我们都知道，文明有多种胜利方式，其中有科技胜利和统治胜利</p><p>科技胜利是实现飞天</p><p>统治胜利是占领其它文明的原始首都</p><p>而我看来，科技胜利是和统治胜利并行的</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>科技胜利的飞天项目在科技树的最后面，而在点亮飞天的过程中必然会点亮作战单位</p><p>若要先一步点亮飞天，必然先一步点亮作战</p><p>而当你的科技，或者说兵种比其它文明领先的时候，就可以形成碾压式的占领</p><p>比如，当你的敌人还在骑兵作战时，你却先一步点亮了轰炸机，直接是毫无疑问的虐杀</p><p>所以一步先，步步先</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>从三个方面来讲</p><h3 id="开拓者"><a href="#开拓者" class="headerlink" title="开拓者"></a>开拓者</h3><p>最经典的爆铺玩法，即广泛铺城</p><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>当你的领土范围足够广时，就代表有足够的地形，足够的资源：</p><p>地形的宽度带来丰富的加成</p><p>资源包括战略资源，加成资源等，其用处多样，战略造兵，加成买卖，奢侈加宜居</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p>在所拥有的几座城中，选取生产力最高的，猛干开拓者，同时政策中选取增加生产开拓者生产力的，再同时，砍树增加生产力</p><p>当然，由于游戏机制的问题，一座城造的开拓者越多，所需的生产力越多，我的方法是下一座城生产开拓者</p><p>注意：每一座城邦在建立时，初期需要生产弓箭手，当然其它战略单位也可，但是弓箭手最划算，攻击力在初期最高</p><h3 id="科技值"><a href="#科技值" class="headerlink" title="科技值"></a>科技值</h3><p>科技值如何获得，前文以及提过了，再不必多说</p><p>这里重点要说的是，学院最好建在有山多的地方，越多越好，四面环山也不怕，这样增加的科技值是最多的，哪怕一座城只建学院也够回本</p><h3 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h3><p>生产力的作用不必多说，越多越好，越能领先其它文明</p><p>提升方法如下</p><h4 id="砍树"><a href="#砍树" class="headerlink" title="砍树"></a>砍树</h4><p>丘陵砍树建矿场，平原砍树建三角田</p><p>不要害怕，直接砍，你砍的越多发展越快，建矿山五十回合甚至更多的收益，才能和砍树相比，有这时间，敌人都能达到你家首都了</p><h4 id="工业区"><a href="#工业区" class="headerlink" title="工业区"></a>工业区</h4><p>工业区能给周围的矿场增加生产力，所以最理想的方法是，六个单元格围着一个工业区，生产力暴增</p><h4 id="奇观"><a href="#奇观" class="headerlink" title="奇观"></a>奇观</h4><p>奇观能增加的生产力也很客观，但是可遇而不可求</p><p>综上，丘陵砍树，建矿山，中间搞工业区</p><p>综上方法，科技遥遥领先，军队遥遥领先，统治遥遥领先，很难不赢</p><p>顺便，除非有特殊执念，否则不建议占领全部城市（大冤种）（指我），其中城市以及作战单位的消耗是难以估计的，我最初两千多金币的小金库，到最后差点赤字</p><p>建议除了原始首都，打其它城市，之后然后接受和解，漫天要价，过了一段时间，再打别的城市，然后接受和解，漫天要价，这样，别的文明就是你的小金库啦，诶嘿。</p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
      <category>文明6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文明6-如何增加科技值</title>
    <link href="/2024/05/28/%E6%96%87%E6%98%8E6-%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E7%A7%91%E6%8A%80%E5%80%BC/"/>
    <url>/2024/05/28/%E6%96%87%E6%98%8E6-%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E7%A7%91%E6%8A%80%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="如何增加科技值"><a href="#如何增加科技值" class="headerlink" title="如何增加科技值"></a>如何增加科技值</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Q:为什么增加科技值？</p><p>A:加快科技树的点亮速度，在与其它文明争霸时，获得领先地位</p><p>ps.当自家文明还用弓箭手的时候，蛮族都用上线列步兵的窒息感，让人很想吐槽到底谁才是蛮族</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="一、单元格"><a href="#一、单元格" class="headerlink" title="一、单元格"></a>一、单元格</h3><p>有些单元格是可以直接获取科技值的，只需将该单元格的市民图标点亮，则可获得相应的科技值</p><p>而在奇观如百慕大三角附近，所获得的科技值灰常多（听说的，还没遇到过百慕大三角）</p><h3 id="二、学院"><a href="#二、学院" class="headerlink" title="二、学院"></a>二、学院</h3><p>并不是建成学院就可以获得科技值，如果其周围没有任何加成的话，科技值收入为0，相当于浪费生产力。</p><p>而加成分为三部分</p><p>1.地形，相应的地形让学院获得加成，从而增加科技值</p><p>2.建筑</p><p>3.市民，当学院升级为图书馆的时候，就可以点亮上面的市民图标，每个市民点亮2点科技值（是点亮在图书馆的市民），后期到大学的时候，可以点亮三个市民</p><p>ps.市民点亮并非越多越好，不然粮食生产以及其它方面会落下。</p><h3 id="三、掠夺"><a href="#三、掠夺" class="headerlink" title="三、掠夺"></a>三、掠夺</h3><p>是你！野蛮6（doge）</p><p>当你掠夺其他文明的学院时，就可以获得他们学院的科技值，这等好事！！！</p><p>挂路灯典中做法：不管周围文明，但要确保自身兵力强盛，等肥羊可宰之时，一举进攻，掠夺开抢，之后潇洒离去，让羊继续养肥</p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
      <category>文明6</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
